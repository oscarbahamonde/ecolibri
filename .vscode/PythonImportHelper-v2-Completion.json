[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyCRUDRouter",
        "importPath": "fastapi_crudrouter",
        "description": "fastapi_crudrouter",
        "isExtraImport": true,
        "detail": "fastapi_crudrouter",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyCRUDRouter",
        "importPath": "fastapi_crudrouter",
        "description": "fastapi_crudrouter",
        "isExtraImport": true,
        "detail": "fastapi_crudrouter",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "init_app",
        "importPath": "backend",
        "description": "backend",
        "isExtraImport": true,
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "DB_URL = getenv('DB_URL')",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "backend.db",
        "description": "backend.db",
        "peekOfCode": "def get_db( ):\n    session = SessionLocal()\n    try:\n        yield session\n        session.commit()\n    finally:\n        session.close()",
        "detail": "backend.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.db",
        "description": "backend.db",
        "peekOfCode": "engine = create_engine(DB_URL)\nSQLModel.metadata.create_all(engine)\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\nBase = declarative_base()\ndef get_db( ):\n    session = SessionLocal()",
        "detail": "backend.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "backend.db",
        "description": "backend.db",
        "peekOfCode": "SessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\nBase = declarative_base()\ndef get_db( ):\n    session = SessionLocal()\n    try:\n        yield session",
        "detail": "backend.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.db",
        "description": "backend.db",
        "peekOfCode": "Base = declarative_base()\ndef get_db( ):\n    session = SessionLocal()\n    try:\n        yield session\n        session.commit()\n    finally:\n        session.close()",
        "detail": "backend.db",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    fullname: str = Field(...)\n    photoURL: str = Field(...)\n    email: EmailStr = Field(...)\n    created_at: datetime = Field(default=datetime.now())\n    updated_at: datetime = Field(default=datetime.now())\nclass Product(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    name: str = Field(...)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Product(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    name: str = Field(...)\n    description: str = Field(...)\n    price: float = Field(...)\n    stock: int = Field(...)\n    images: List[str] = Field(...)\n    created_at: datetime = Field(default=datetime.now())\n    updated_at: datetime = Field(default=datetime.now())\nclass Order(SQLModel, table=True):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Order(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    user_id: UUID = Field(...,)\n    product_id: UUID = Field(...)    \n    quantity: int = Field(...)\n    created_at: datetime = Field(default=datetime.now())\n    updated_at: datetime = Field(default=datetime.now())\nclass Cart(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    user_id: UUID = Field(...)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Cart(SQLModel, table=True):\n    id: UUID = Field(default=uuid4(), primary_key=True)\n    user_id: UUID = Field(...)\n    orders: List[UUID] = Field(...)\n    created_at: datetime = Field(default=datetime.now())\n    updated_at: datetime = Field(default=datetime.now())\n    total: float = Field(...)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "backend.router",
        "description": "backend.router",
        "peekOfCode": "user = SQLAlchemyCRUDRouter(schema=User, db_model=User, db=get_db)\nproduct = SQLAlchemyCRUDRouter(schema=Product, db_model=Product, db=get_db)\norder = SQLAlchemyCRUDRouter(schema=Order, db_model=Order, db=get_db)\ncart = SQLAlchemyCRUDRouter(schema=Cart, db_model=Cart, db=get_db)",
        "detail": "backend.router",
        "documentation": {}
    },
    {
        "label": "product",
        "kind": 5,
        "importPath": "backend.router",
        "description": "backend.router",
        "peekOfCode": "product = SQLAlchemyCRUDRouter(schema=Product, db_model=Product, db=get_db)\norder = SQLAlchemyCRUDRouter(schema=Order, db_model=Order, db=get_db)\ncart = SQLAlchemyCRUDRouter(schema=Cart, db_model=Cart, db=get_db)",
        "detail": "backend.router",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "backend.router",
        "description": "backend.router",
        "peekOfCode": "order = SQLAlchemyCRUDRouter(schema=Order, db_model=Order, db=get_db)\ncart = SQLAlchemyCRUDRouter(schema=Cart, db_model=Cart, db=get_db)",
        "detail": "backend.router",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 5,
        "importPath": "backend.router",
        "description": "backend.router",
        "peekOfCode": "cart = SQLAlchemyCRUDRouter(schema=Cart, db_model=Cart, db=get_db)",
        "detail": "backend.router",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = init_app()\nprint(\"http://localhost:8000/docs\")",
        "detail": "app",
        "documentation": {}
    }
]